from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import asyncio
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import logging

logging.basicConfig(level=logging.DEBUG, format="[%(asctime)s] [%(levelname)s]: %(message)s", encoding='utf-8')

api = ""
bot = Bot(token = api)
dp = Dispatcher(bot, storage= MemoryStorage())

kb_reply = ReplyKeyboardMarkup(
    [
        [
        KeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å üßÆ"),
        KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üóíÔ∏è")
        ]
    ],
    resize_keyboard=True
)

kb_inline = InlineKeyboardMarkup(
    inline_keyboard=[
        [
        InlineKeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π", callback_data="calories"),
        InlineKeyboardButton(text="–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞ ‚öôÔ∏è", callback_data="formulas")
        ]
    ]
)

@dp.message_handler(text = "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å üßÆ")
async def main_menu(message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb_inline)

@dp.callback_query_handler(text="formulas")
async def show_formulas(call):
    await call.message.answer(f"–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞: \n 10 * '–í–µ—Å' + 6.25 * '–†–æ—Å—Ç' - 5 * '–í–æ–∑—Ä–∞—Å—Ç' + 5")
    await call.answer()

@dp.message_handler(commands=["start"])
async def start_message(message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é,\n–ù–∞–∂–º–∏ –Ω–∞ '`–†–∞—Å—Å—á–∏—Ç–∞—Ç—å üßÆ`', —á—Ç–æ–±—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–¥—Å—á–µ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π.", parse_mode="Markdown", reply_markup = kb_reply)

@dp.message_handler()
async def any_message(message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")

#--------------------–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
class CalcCalories(StatesGroup):
    age = State()
    growth = State()
    weight = State()

@dp.callback_query_handler(text="calories")
async def set_age(call):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await call.answer()
    await CalcCalories.age.set()


@dp.message_handler(state=CalcCalories.age)
async def set_growth(message, state):
    if isinstance(message.text, int) or isinstance(message.text, float):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(age=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:")
    await CalcCalories.growth.set()

@dp.message_handler(state=CalcCalories.growth)
async def set_weight(message, state):
    if isinstance(message.text, int) or isinstance(message.text, float):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(growth=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:")
    await CalcCalories.weight.set()

@dp.message_handler(state=CalcCalories.weight)
async def send_calories(message, state):
    if isinstance(message.text, int) or isinstance(message.text, float):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(weight=message.text)
    data = await state.get_data()
    calories = 10 * int(data["weight"]) + 6.25 * int(data["growth"]) - 5 * int(data["age"]) + 5

    await message.answer(f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {calories}")
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
